&НаКлиенте
Перем ОбновитьИнтерфейс;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//++ Установка реквизитов формы
	ПараметрыПлановПрофосмотра = амед_ПрофосмотрыСервер.ПолучитьПараметрыПлановПрофосмотра();
	
	// Периодичность прохождения 
	ПериодичностьПланаПрофосмотраДляДетей = ПараметрыПлановПрофосмотра.ПериодичностьПланаПрофосмотраДляДетей;
	ПериодичностьПланаПрофосмотраДляВзрослых = ПараметрыПлановПрофосмотра.ПериодичностьПланаПрофосмотраДляВзрослых;
	
	// Автоматическое создание планов
	ИспользоватьАвтоСозданиеПланаПрофосмотра = ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотра;
	РежимАвтоСозданияПланаПрофосмотраПоСпециализации = ПараметрыПлановПрофосмотра.РежимАвтоСозданияПланаПрофосмотраПоСпециализации;
	РежимАвтоСозданияПланаПрофосмотраПоШаблонамПриема = ПараметрыПлановПрофосмотра.РежимАвтоСозданияПланаПрофосмотраПоШаблонамПриема;
	РежимАвтоСозданияПланаПрофосмотраПоНоменклатуре = ПараметрыПлановПрофосмотра.РежимАвтоСозданияПланаПрофосмотраПоНоменклатуре;
	
	// Планирование взаимодействия
	СтруктураПериодичностьПланированияСобытий = ПараметрыПлановПрофосмотра.ПланированиеВзаимодействияНедозвон;
	ПланированиеВраимодействияНедозвонПериодичность = СтруктураПериодичностьПланированияСобытий.Периодичность;
	ПланированиеВраимодействияНедозвонКоличествоПериодов = СтруктураПериодичностьПланированияСобытий.КоличествоПериодов;
	СтруктураПериодичностьПланированияСобытий = ПараметрыПлановПрофосмотра.ПланированиеВзаимодействияСамЗапишется;
	ПланированиеВраимодействияСамЗапишетсяПериодичность = СтруктураПериодичностьПланированияСобытий.Периодичность;
	ПланированиеВраимодействияСамЗапишетсяКоличествоПериодов = СтруктураПериодичностьПланированияСобытий.КоличествоПериодов;
	СтруктураПериодичностьПланированияСобытий = ПараметрыПлановПрофосмотра.ПланированиеВзаимодействияНеЯвился;
	ПланированиеВраимодействияНеЯвилсяПериодичность = СтруктураПериодичностьПланированияСобытий.Периодичность;
	ПланированиеВраимодействияНеЯвилсяКоличествоПериодов = СтруктураПериодичностьПланированияСобытий.КоличествоПериодов;
	ПланированиеВраимодействияНеЯвилсяВариантПричины = СтруктураПериодичностьПланированияСобытий.УсловиеПрименения;
	ПланированиеВраимодействияНеЯвилсяПричиныОтменыЗаявок.ЗагрузитьЗначения(СтруктураПериодичностьПланированияСобытий.ПричиныОтменыЗаявок);
	
	// Блокировка пациентов не явившиесв на ПО по регламентному заданию 
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.амед_КонтрольНеявокПациентовНаПО);
	ИспользоватьКонтрольНеявокНаПрофосмотр = РегламентноеЗадание.Использование;
	РасписаниеРегламентногоЗадания = РегламентноеЗадание.Расписание;
	
	// Префикс документа Автообзвон
	ИспользоватьПрефиксЛистаАвтообзвона = ЗначениеЗаполнено(Константы.амед_ПрефиксЛистаАвтообзвона.Получить());
	
	//-- Установка реквизитов формы
	
	// Установка доступности элементов
	УстановитьДоступность();
	
	// Обновление наименования команд
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Если Не(Отказ) И Модифицированность Тогда
		ПередЗакрытиемНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройкиЗакрепленияВрача(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ОткрытьФорму(
		"Справочник.амед_НастройкиЗакрепленияВрача.ФормаСписка",
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхСпециализаций(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяРеквизитаФормыДляЗаполнения",         "АвтоСозданиеПланаПрофосмотраСпециализации");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.КатегорииВыработки");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите специализации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраСпециализации);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ОткрытьФорму("Обработка.амед_ПанельПрофосмотры.Форма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОткрытьСписокВыбранныхСпециализацийЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхСпециализацийЗавершение(СтруктураПараметров, Параметры) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	// Установка флага
	Модифицированность = Истина;
	
	// Установка параметров настройки
	ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраСпециализации = СтруктураПараметров.МассивВыбранныхЗначений;
	
	// Обновление команд формы
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхШаблоновПриема(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяРеквизитаФормыДляЗаполнения",         "ШаблоныПриема");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.ШаблоныHTML");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите шаблоны приема для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраШаблоныПриема);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ОткрытьФорму("Обработка.амед_ПанельПрофосмотры.Форма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОткрытьСписокВыбранныхШаблоновПриемаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхШаблоновПриемаЗавершение(СтруктураПараметров, Параметры) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	// Установка флага
	Модифицированность = Истина;
	
	// Установка параметров настройки
	ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраШаблоныПриема = СтруктураПараметров.МассивВыбранныхЗначений;
	
	// Обновление команд формы
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьСписокВыбраннойНоменклатуры(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяРеквизитаФормыДляЗаполнения",         "АвтоСозданиеПланаПрофосмотраНоменклатура");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.амед_СегментыНоменклатуры");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите сегменты номенклатуры для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраНоменклатура);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.амед_ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОткрытьСписокВыбраннойНоменклатурыЗавершение", ЭтотОбъект));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбраннойНоменклатурыЗавершение(ВыбраннаяНоменклатура, Параметры) Экспорт

	Если ТипЗнч(ВыбраннаяНоменклатура) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	// Установка флага
	Модифицированность = Истина;
	
	// Установка параметров настройки
	ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраНоменклатура = ВыбраннаяНоменклатура;
	
	// Обновление команд формы
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПричиныОтменыЗаявок(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяРеквизитаФормыДляЗаполнения",         "ПричиныОтменыЗаявок");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.ПричиныОтменыЗаявок");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите причины отмены заявок для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                ПланированиеВраимодействияНеЯвилсяПричиныОтменыЗаявок.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.амед_ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОткрытьСписокПричиныОтменыЗаявокЗавершение", ЭтотОбъект));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПричиныОтменыЗаявокЗавершение(МассивВыбранныхЗначений, Параметры) Экспорт
	
	Если ТипЗнч(МассивВыбранныхЗначений) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	ПланированиеВраимодействияНеЯвилсяПричиныОтменыЗаявок.ЗагрузитьЗначения(МассивВыбранныхЗначений);
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры
	
&НаКлиенте
Процедура НастроитьКонтрольНеявокНаПрофосмотр(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ОткрытьФорму(
		"Обработка.амед_ПанельПрофосмотры.Форма.НастройкаКонтроляНеявок",
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеРегламентногоЗаданияЗавершение", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		// Установка реквизитов формы
		РасписаниеРегламентногоЗадания = Расписание;
		ЗаписатьРасписаниеРегламентногоЗадания(Расписание);
		
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиАБД(Команда)
	
	ОткрытьФорму("РегистрСведений.бит_НастройкиАБД.Форма.ФормаЗаписи");
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИспользоватьАвтоСозданиеПланаПрофосмотраПриИзменении(Элемент)
	
	УстановитьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПланаПрофосмотраДляДетейПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПланаПрофосмотраДляДетейОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПланаПрофосмотраДляВзрослыхПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПланаПрофосмотраДляВзрослыхОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РежимАвтоСозданияПланаПрофосмотраПоСпециализацииПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РежимАвтоСозданияПланаПрофосмотраПоШаблонамПриемаПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКонтрольНеявокНаПрофосмотрПриИзменении(Элемент)
	
	ЗаписатьИспользованиеРегламентногоЗадания(ИспользоватьКонтрольНеявокНаПрофосмотр);
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПрефиксЛистаАвтообзвонаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура амед_ПрефиксЛистаАвтообзвонаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура амед_КоличествоНерезультативныхЗвонковПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры


#КонецОбласти



#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()

	Количество = ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраСпециализации.Количество();
	Если Количество > 0 Тогда
		ЗаголовокСпециализации = СтрСоединить(ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраСпециализации, ",");
	Иначе
		ЗаголовокСпециализации = НСтр("ru = 'Выбрать специализации'");	
	КонецЕсли;	
	
	Элементы.ОткрытьСписокВыбранныхСпециализаций.Заголовок = ЗаголовокСпециализации;

	// 
	Количество = ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраШаблоныПриема.Количество();
	Если Количество > 0 Тогда
		ЗаголовокШаблонаПриема = СтрСоединить(ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраШаблоныПриема, ",");
	Иначе
		ЗаголовокШаблонаПриема = НСтр("ru = 'Выбрать шаблоны приема'");	
	КонецЕсли;	
	
	Элементы.ОткрытьСписокВыбранныхШаблоновПриема.Заголовок = ЗаголовокШаблонаПриема;
	
	//
	Количество = ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраНоменклатура.Количество();
	Если Количество > 0 Тогда
		ЗаголовокВыбраннаяНоменклатура = СтрСоединить(ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотраНоменклатура, ",");
	Иначе
		ЗаголовокВыбраннаяНоменклатура = НСтр("ru = 'Выбрать номенклатуру'");	
	КонецЕсли;	
	
	Элементы.ОткрытьСписокВыбраннойНоменклатуры.Заголовок = ЗаголовокВыбраннаяНоменклатура;
	
	// 
	Количество = ПланированиеВраимодействияНеЯвилсяПричиныОтменыЗаявок.Количество();
	Если Количество > 0 Тогда
		ЗаголовокПричиныОтменыЗаявок = СтрСоединить(ПланированиеВраимодействияНеЯвилсяПричиныОтменыЗаявок.ВыгрузитьЗначения(), ",");
	Иначе
		ЗаголовокПричиныОтменыЗаявок = НСтр("ru = 'Выбрать причины отмены заявок'");	
	КонецЕсли;	
	
	Элементы.ОткрытьСписокПричиныОтменыЗаявок.Заголовок = ЗаголовокПричиныОтменыЗаявок;
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьРасписаниеРегламентногоЗадания(Расписание)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.амед_КонтрольНеявокПациентовНаПО);
	РегламентноеЗадание.Расписание = Расписание;
	//РегламентноеЗадание.Параметры.Очистить();
	РегламентноеЗадание.Записать();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьИспользованиеРегламентногоЗадания(Использование)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.амед_КонтрольНеявокПациентовНаПО);
	РегламентноеЗадание.Использование = Использование;
	РегламентноеЗадание.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры


#Область ПриИзмененииРеквизитов

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Результат = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти


&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат КонстантаИмя;
	КонецЕсли;
	
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")

	// ++ Параметры настроек профосмотра
	Элементы.ГруппаАвтоСозданиеПлановДиспансеризацииОтборы.Доступность = ИспользоватьАвтоСозданиеПланаПрофосмотра;
	Элементы.ОткрытьСписокВыбранныхСпециализаций.Доступность = РежимАвтоСозданияПланаПрофосмотраПоСпециализации > 0;
	Элементы.ОткрытьСписокВыбранныхШаблоновПриема.Доступность = РежимАвтоСозданияПланаПрофосмотраПоШаблонамПриема > 0;
	//Элементы.ГруппаПланыДиспансеризацииПериодичность.Доступность = ИспользоватьАвтоСозданиеПланаПрофосмотра;
	//Элементы.ПериодичностьПланаПрофосмотраДляДетей.АвтоОтметкаНезаполненного = ИспользоватьАвтоСозданиеПланаПрофосмотра;
	//Элементы.ПериодичностьПланаПрофосмотраДляДетей.ОтметкаНезаполненного = ИспользоватьАвтоСозданиеПланаПрофосмотра И Не ЗначениеЗаполнено(ПериодичностьПланаПрофосмотраДляДетей);
	//Элементы.ПериодичностьПланаПрофосмотраДляВзрослых.АвтоОтметкаНезаполненного = ИспользоватьАвтоСозданиеПланаПрофосмотра;
	//Элементы.ПериодичностьПланаПрофосмотраДляВзрослых.ОтметкаНезаполненного = ИспользоватьАвтоСозданиеПланаПрофосмотра И Не ЗначениеЗаполнено(ПериодичностьПланаПрофосмотраДляВзрослых);
	// -- Параметры настроек профосмотра
	
	// ++ Автообзвон
	Элементы.амед_ПрефиксЛистаАвтообзвона.Доступность = ИспользоватьПрефиксЛистаАвтообзвона;
	// -- Автообзвон
	
	// ++ Контроль неявок на ПО
	Элементы.НастроитьКонтрольНеявокНаПрофосмотр.Доступность = ИспользоватьКонтрольНеявокНаПрофосмотр;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = ИспользоватьКонтрольНеявокНаПрофосмотр;
	// -- Контроль неявок на ПО
	
КонецПроцедуры	

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	
	// ++ Настройки параметров
	ПараметрыПлановПрофосмотра.АвтоСозданиеПланаПрофосмотра = ИспользоватьАвтоСозданиеПланаПрофосмотра;
	ПараметрыПлановПрофосмотра.ПериодичностьПланаПрофосмотраДляДетей = ПериодичностьПланаПрофосмотраДляДетей;
	ПараметрыПлановПрофосмотра.ПериодичностьПланаПрофосмотраДляВзрослых = ПериодичностьПланаПрофосмотраДляВзрослых;
	ПараметрыПлановПрофосмотра.РежимАвтоСозданияПланаПрофосмотраПоСпециализации = РежимАвтоСозданияПланаПрофосмотраПоСпециализации;
	ПараметрыПлановПрофосмотра.РежимАвтоСозданияПланаПрофосмотраПоШаблонамПриема = РежимАвтоСозданияПланаПрофосмотраПоШаблонамПриема;
	ПараметрыПлановПрофосмотра.РежимАвтоСозданияПланаПрофосмотраПоНоменклатуре = РежимАвтоСозданияПланаПрофосмотраПоНоменклатуре;
	
	ПериодичностьПланированияСобытий = амед_ПрофосмотрыКлиентСервер.СтруктураПериодичностьПланированияСобытий(ПланированиеВраимодействияНедозвонПериодичность, ПланированиеВраимодействияНедозвонКоличествоПериодов);
	ПараметрыПлановПрофосмотра.ПланированиеВзаимодействияНедозвон = ПериодичностьПланированияСобытий;
	
	ПериодичностьПланированияСобытий = амед_ПрофосмотрыКлиентСервер.СтруктураПериодичностьПланированияСобытий(ПланированиеВраимодействияСамЗапишетсяПериодичность, ПланированиеВраимодействияСамЗапишетсяКоличествоПериодов);
	ПараметрыПлановПрофосмотра.ПланированиеВзаимодействияСамЗапишется = ПериодичностьПланированияСобытий;
	
	ПериодичностьПланированияСобытий = амед_ПрофосмотрыКлиентСервер.СтруктураПериодичностьПланированияСобытий(ПланированиеВраимодействияНеявилсяПериодичность, ПланированиеВраимодействияНеявилсяКоличествоПериодов);
	ПериодичностьПланированияСобытий.УсловиеПрименения = ПланированиеВраимодействияНеявилсяВариантПричины;
	ПериодичностьПланированияСобытий.ПричиныОтменыЗаявок = ПланированиеВраимодействияНеЯвилсяПричиныОтменыЗаявок.ВыгрузитьЗначения();
	ПараметрыПлановПрофосмотра.ПланированиеВзаимодействияНеявился = ПериодичностьПланированияСобытий;
	
	Константы.амед_НастройкиПлановПрофосмотра.Установить(
		Новый ХранилищеЗначения(ПараметрыПлановПрофосмотра)
	);
	// -- Настройки параметров
	
	// ++ Автообзвон 
	Если Не(ИспользоватьПрефиксЛистаАвтообзвона) И ЗначениеЗаполнено(Константы.амед_ПрефиксЛистаАвтообзвона.Получить()) Тогда
		Константы.амед_ПрефиксЛистаАвтообзвона.Установить("");
	КонецЕсли;	
	// -- Автообзвон 
	
КонецПроцедуры



#КонецОбласти
